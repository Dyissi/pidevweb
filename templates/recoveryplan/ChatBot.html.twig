{% extends 'base.html.twig' %}
{% block hero %}

{% block body %}
    <h1 style="text-align: center; font-size: 1.8em;">Injury Recovery Chatbot</h1>
    <div class="chatbot-container">
        <div class="chatbot-messages" id="chatbot-messages"></div>
        <div class="chatbot-input">
            <input type="text" id="chat-input" placeholder="Ask about your injuries, recovery, or just say hi..." />
            <button onclick="sendMessage()">Send</button>
        </div>
    </div>

    <link href="https://unpkg.com/botui@0.3.9/build/botui.min.css" rel="stylesheet" />
    <style>
        .chatbot-container {
            max-width: 600px;
            margin: 20px auto;
            border: 1px solid #ccc;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            background-color: #fff;
        }
        .chatbot-messages {
            max-height: 400px;
            overflow-y: auto;
            padding: 20px;
        }
        .chatbot-message {
            margin: 10px 0;
            padding: 10px 15px;
            border-radius: 15px;
            max-width: 80%;
            line-height: 1.4;
        }
        .chatbot-message.user {
            background-color: #709775;
            color: #fff;
            margin-left: auto;
            text-align: right;
        }
        .chatbot-message.bot {
            background-color: #a1c4a5;
            color: #333;
            margin-right: auto;
        }
        .chatbot-input {
            display: flex;
            padding: 10px;
            border-top: 1px solid #ccc;
        }
        .chatbot-input input {
            flex: 1;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            margin-right: 10px;
        }
        .chatbot-input button {
            padding: 10px 20px;
            background-color: #709775;
            color: #fff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }
        .chatbot-input button:hover {
            background-color: #5a7a5f;
        }
    </style>
    <script src="https://unpkg.com/botui@0.3.9/build/botui.min.js"></script>
    <script>
        const recoveryData = {{ recoveryData|json_encode|raw }};
        const messagesContainer = document.getElementById('chatbot-messages');
        const chatInput = document.getElementById('chat-input');
        let learnedResponses = JSON.parse(localStorage.getItem('learnedResponses')) || {};

        function addMessage(text, sender) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `chatbot-message ${sender}`;
            messageDiv.textContent = text;
            messagesContainer.appendChild(messageDiv);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        function learnResponse(input, response) {
            if (!learnedResponses[input]) {
                learnedResponses[input] = response;
                localStorage.setItem('learnedResponses', JSON.stringify(learnedResponses));
            }
        }

        function sendMessage() {
            const input = chatInput.value.trim().toLowerCase();
            if (!input) return;

            addMessage(input, 'user');
            let response;

            if (learnedResponses[input]) {
                response = learnedResponses[input];
            } else if (input.includes('hi') || input.includes('hello') || input.includes('hey') || input.includes('yo')) {
                const greetings = [
                    'Hey! Ready to dive into your recovery journey?',
                    'Hi there! What’s up with your health today?',
                    'Yo! Let’s chat about your injuries or recovery!',
                    'Hello! Got recovery questions or just wanna talk?'
                ];
                response = greetings[Math.floor(Math.random() * greetings.length)];
            } else if (input === 'what are my injuries?') {
                response = recoveryData.injuries.length > 0
                    ? `You have ${recoveryData.injuries.length} injur${recoveryData.injuries.length > 1 ? 'ies' : 'y'}: ${recoveryData.injuries.join(', ')}.`
                    : 'You have no injuries.';
            } else if (input.includes('recovery goal')) {
                response = recoveryData.recoveryPlans.length > 0
                    ? `Your recovery goal${recoveryData.recoveryPlans.length > 1 ? 's are' : ' is'}: ${recoveryData.recoveryPlans.map(plan => plan.goal).join(', ')}.`
                    : 'You have no recovery plan set.';
            } else if (input.includes('when does my recovery start')) {
                response = recoveryData.recoveryPlans.length > 0
                    ? `Your recovery plan${recoveryData.recoveryPlans.length > 1 ? 's start' : ' starts'} on: ${recoveryData.recoveryPlans.map(plan => plan.startDate).join(', ')}.`
                    : 'You have no recovery plan set.';
            } else if (input.includes('when does my recovery end')) {
                response = recoveryData.recoveryPlans.length > 0
                    ? `Your recovery plan${recoveryData.recoveryPlans.length > 1 ? 's end' : ' ends'} on: ${recoveryData.recoveryPlans.map(plan => plan.endDate).join(', ')}.`
                    : 'You have no recovery plan set.';
            } else if (input.includes('phase') || input.includes('stage')) {
                response = recoveryData.recoveryPlans.length > 0
                    ? `Your recovery plan${recoveryData.recoveryPlans.length > 1 ? 's are' : ' is'} in the following phase${recoveryData.recoveryPlans.length > 1 ? 's' : ''}: ${recoveryData.recoveryPlans.map(plan => plan.phase || 'Unknown').join(', ')}.`
                    : 'No recovery plan found, so no phase to report.';
            } else if (input.includes('eat') || input.includes('nutrition') || input.includes('diet')) {
                response = recoveryData.injuries.length > 0
                    ? `Your nutrition plan for ${recoveryData.injuries.join(', ')}: ${recoveryData.nutritionPlan}`
                    : 'You may stick to your regular diet.';
            } else if (input.includes('exercise') || input.includes('workout') || input.includes('training')) {
                response = recoveryData.injuries.length > 0
                    ? `For ${recoveryData.injuries.join(', ')}: ${recoveryData.exercisePlan}`
                    : 'No injury recorded, so stick to your regular exercise routine or try light cardio.';
            } else if (input.includes('progress') || input.includes('update')) {
                response = recoveryData.recoveryPlans.length > 0
                    ? `You’re making strides in ${recoveryData.recoveryPlans.length} recovery plan${recoveryData.recoveryPlans.length > 1 ? 's' : ''}: ${recoveryData.recoveryPlans.map(plan => plan.phase || 'Unknown').join(', ')}. Goal${recoveryData.recoveryPlans.length > 1 ? 's' : ''}: ${recoveryData.recoveryPlans.map(plan => plan.goal || 'None set').join(', ')}.`
                    : 'No recovery plan to track progress for.';
            } else if (input.includes('tips') || input.includes('advice')) {
                const tips = [
                    'Hydrate often and get plenty of rest for faster healing!',
                    'Stick to your nutrition plan and avoid straining your injury.',
                    'Try mindfulness or light stretching to stay positive!',
                    'Listen to your body and don’t rush recovery!'
                ];
                response = tips[Math.floor(Math.random() * tips.length)];
            } else {
                const fallbackResponses = [
                    'Not sure what you mean! Try asking about your injuries, nutrition, or recovery plan.',
                    'Oops, I’m lost! How about a question on your recovery or exercises?',
                    'Hmm, let’s try something else—ask about your phase or tips!',
                    'I didn’t catch that. Want to talk injuries or diet?'
                ];
                response = fallbackResponses[Math.floor(Math.random() * fallbackResponses.length)];
                learnResponse(input, response);
            }

            setTimeout(() => {
                addMessage(response, 'bot');
                learnResponse(input, response);
            }, 500);
            chatInput.value = '';
        }

        chatInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') sendMessage();
        });

        const welcomeMessages = [
            'Welcome! Ask about your injuries, recovery plans, nutrition, or say hi!',
            'Hey! I’m here to guide your recovery. What’s on your mind?',
            'Hi! Got questions about your injuries or progress? Let’s chat!'
        ];
        addMessage(welcomeMessages[Math.floor(Math.random() * welcomeMessages.length)], 'bot');
    </script>
{% endblock %}
{% endblock %}
