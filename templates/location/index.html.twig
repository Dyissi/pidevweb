{% extends 'baseB.html.twig' %}

{% block title %}Location index{% endblock %}

{% block stylesheet %}
    {{ parent() }}
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    <style>
        .location-map {
            height: 300px;
            margin-bottom: 20px;
        }
        .location-card {
            margin-bottom: 20px;
            padding: 15px;
            border: 1px solid #ddd;
            border-radius: 8px;
        }
        .leaflet-popup-content {
            margin: 10px;
        }
        .leaflet-popup-content h4 {
            color: #333;
            border-bottom: 1px solid #eee;
            padding-bottom: 5px;
        }
        .leaflet-popup-content p {
            color: #666;
        }
    </style>
{% endblock %}

{% block head %}
    {{ parent() }}
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
{% endblock %}

{% block main %}
    <div class="card mb-4">
        <div class="card-header">
            <i class="fas fa-map-marker-alt me-1"></i>
            Location Map View
        </div>
        <div class="card-body">
            <div id="location-map" style="height: 400px; margin-bottom: 20px;"></div>
        </div>
    </div>

    {# Your existing table card #}
    <div class="card mb-4">
        <div class="card-header">
            <i class="fas fa-table me-1"></i>
            Location List
        </div>
        <div class="card-body">
            <table id="datatablesSimple">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>LocationName</th>
                        <th>LocationAddress</th>
                        <th>LocationCity</th>
                        <th>LocationCapacity</th>
                        <th>LocationType</th>
                        <th>actions</th>
                    </tr>
                </thead>
                <tbody>
                {% for location in locations %}
                    <tr>
                        <td>{{ location.id }}</td>
                        <td>{{ location.locationName }}</td>
                        <td>{{ location.locationAddress }}</td>
                        <td>{{ location.locationCity }}</td>
                        <td>{{ location.locationCapacity }}</td>
                        <td>{{ location.locationType }}</td>
                        <td>
                            <a href="{{ path('app_location_show', {'id': location.id}) }}">show</a>
                            <a href="{{ path('app_location_edit', {'id': location.id}) }}">edit</a>
                        </td>
                    </tr>
                {% endfor %}
                </tbody>
            </table>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize the map centered on Tunisia
            var map = L.map('location-map', {
                language: 'en'  // Set map interface language to English
            }).setView([36.8065, 10.1815], 7);
            
            // Use Esri World Street Map for English labels
            L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}', {
                maxZoom: 19,
                attribution: 'Tiles &copy; Esri &mdash; Source: Esri, DeLorme, NAVTEQ, USGS, Intermap, iPC, NRCAN, Esri Japan, METI, Esri China (Hong Kong), Esri (Thailand), TomTom, 2012'
            }).addTo(map);

            // Add markers for each location
            var bounds = [];
            var loadedLocations = 0;
            var totalLocations = {{ locations|length }};

            {% for location in locations %}
                fetch('{{ path('app_location_coordinates', {'id': location.id}) }}')
                    .then(response => response.json())
                    .then(data => {
                        loadedLocations++;
                        if (data.error) {
                            console.error('Failed to geocode location:', {
                                locationId: {{ location.id }},
                                name: '{{ location.locationName }}',
                                address: '{{ location.locationAddress }}',
                                city: '{{ location.locationCity }}',
                                error: data.error
                            });
                        } else {
                            const lat = data.latitude;
                            const lng = data.longitude;
                            bounds.push([lat, lng]);
                            
                            // Create a custom icon with a larger size
                            var customIcon = L.icon({
                                iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',
                                shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
                                iconSize: [25, 41],
                                iconAnchor: [12, 41],
                                popupAnchor: [1, -34],
                                shadowSize: [41, 41]
                            });

                            // Add marker with custom icon and enhanced popup
                            L.marker([lat, lng], { icon: customIcon })
                                .addTo(map)
                                .bindPopup(
                                    '<div style="min-width: 200px;">' +
                                    '<h4 style="margin: 0 0 5px 0;">{{ location.locationName }}</h4>' +
                                    '<p style="margin: 0 0 5px 0;"><strong>Address:</strong><br>{{ location.locationAddress }}</p>' +
                                    '<p style="margin: 0;"><strong>City:</strong> {{ location.locationCity }}</p>' +
                                    '</div>',
                                    { maxWidth: 300 }
                                );
                            
                            // Fit map to bounds after adding marker
                            if (bounds.length === 1) {
                                map.setView([lat, lng], 15);
                            } else {
                                map.fitBounds(bounds, { padding: [50, 50] });
                            }
                        }

                        // Log completion
                        if (loadedLocations === totalLocations) {
                            console.log('Finished loading all locations. Successfully mapped:', bounds.length, 'out of', totalLocations);
                        }
                    })
                    .catch(error => {
                        loadedLocations++;
                        console.error('Error loading location {{ location.id }}:', error);
                        
                        // Log completion
                        if (loadedLocations === totalLocations) {
                            console.log('Finished loading all locations. Successfully mapped:', bounds.length, 'out of', totalLocations);
                        }
                    });
            {% endfor %}
        });
    </script>
{% endblock %}
